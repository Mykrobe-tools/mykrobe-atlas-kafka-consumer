shared:
  configuration:
    schema.registry.url: ${SCHEMA_REGISTRY_URL}
    bootstrap-servers: ${BROKER_URL}
    brokers: ${BROKER_URL}
spring:
  kafka:
    bootstrap-servers: ${BROKER_URL}
    consumer:
      bootstrap-servers: ${BROKER_URL}
      group-id: mykrobe-streaming-insight
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.connect.json.JsonDeserializer
    producer:
      bootstrap-servers: ${BROKER_URL}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      schema.registry.url: ${SCHEMA_REGISTRY_URL}
      specific.avro.reader: true
    streams:
      application-id: mykrobe-pipeline-v1.0.1
  cloud.stream:
    bindings:
      source_experiments:
        destination: mykrobe.atlas.experiments
        content-type: application/json
      source_predictor_result:
        destination: mykrobe.atlas.experiments
        content-type: application/json
      source_distance_result:
        destination: mykrobe.atlas.experiments
        content-type: application/json
      source_predictor_result_file:
        destination: mykrobe.atlas.experiments
        content-type: application/json
      source_groups:
        destination: mykrobe.atlas.groups
        content-type: application/json
      source_group_experiments:
        destination: mykrobe.atlas.groups
        content-type: application/json
      source_predictor_result_lineage:
        destination: mykrobe.atlas.experiments
        content-type: application/json
      sink_core_experiments:
        producer:
          useNativeEncoding: true
        destination: core_experiments
        content-type: application/*+avro
      sink_core_predictor_result:
        producer:
          useNativeEncoding: true
        destination: core_predictor_result
        content-type: application/*+avro
      sink_core_tree_distance_result:
        producer:
          useNativeEncoding: true
        destination: core_tree_distance_result
        content-type: application/*+avro
      sink_core_nearest_neighbour_result:
        producer:
          useNativeEncoding: true
        destination: core_nearest_neighbour_result
        content-type: application/*+avro
      sink_core_predictor_result_file:
        producer:
          useNativeEncoding: true
        destination: core_predictor_result_file
        content-type: application/*+avro
      sink_core_groups:
        producer:
          useNativeEncoding: true
        destination: core_groups
        content-type: application/*+avro
      sink_core_group_experiments:
        producer:
          useNativeEncoding: true
        destination: core_group_experiments
        content-type: application/*+avro
      sink_core_predictor_result_lineage:
        producer:
          useNativeEncoding: true
        destination: core_predictor_result_lineage
        content-type: application/*+avro
    kafka.streams:
      binder:
        application-id: mykrobe-streams-pleasery
        bootstrap-servers: ${BROKER_URL}
        brokers: ${BROKER_URL}
        configuration:
          commit.interval.ms: 1000
          schema.registry.url: ${SCHEMA_REGISTRY_URL}
      bindings:
        source_experiments:
          consumer:
            application-id: source-experiments
            keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
            valueSerde: org.springframework.kafka.support.serializer.JsonSerde
        source_predictor_result:
          consumer:
            application-id: source-predictor-result
            keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
            valueSerde: org.springframework.kafka.support.serializer.JsonSerde
        source_distance_result:
          consumer:
            application-id: source-distance-result
            keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
            valueSerde: org.springframework.kafka.support.serializer.JsonSerde
        source_predictor_result_file:
          consumer:
            application-id: source-predictor-result-file
            keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
            valueSerde: org.springframework.kafka.support.serializer.JsonSerde
        source_groups:
          consumer:
            application-id: source-groups
            keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
            valueSerde: org.springframework.kafka.support.serializer.JsonSerde
        source_group_experiments:
          consumer:
            application-id: source-group-experiments
            keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
            valueSerde: org.springframework.kafka.support.serializer.JsonSerde
        source_predictor_result_lineage:
          consumer:
            application-id: source-predictor-result-lineage
            keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
            valueSerde: org.springframework.kafka.support.serializer.JsonSerde
        sink_core_experiments:
          producer:
            application-id: sink-core-experiments
            configuration:
              key.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
              value.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
            keySerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
            valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
        sink_core_predictor_result:
          producer:
            application-id: sink-core-predictor-result
            configuration:
              key.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
              value.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
            keySerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
            valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
        sink_core_tree_distance_result:
          producer:
            application-id: sink-core-tree-distance-result
            configuration:
              key.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
              value.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
            keySerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
            valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
        sink_core_nearest_neighbour_result:
          producer:
            application-id: sink-core-nearest-neighbour-result
            configuration:
              key.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
              value.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
            keySerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
            valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
        sink_core_predictor_result_file:
          producer:
            application-id: sink-core-predictor-result-file
            configuration:
              key.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
              value.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
            keySerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
            valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
        sink_core_groups:
          producer:
            application-id: sink-core-groups
            configuration:
              key.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
              value.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
            keySerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
            valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
        sink_core_group_experiments:
          producer:
            application-id: sink-core-group-experiments
            configuration:
              key.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
              value.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
            keySerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
            valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
        sink_core_predictor_result_lineage:
          producer:
            application-id: sink-core-predictor-result-lineage
            configuration:
              key.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
              value.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
            keySerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
            valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
  main.allow-bean-definition-overriding: true
logging:
  level:
    root: DEBUG
    org.apache.kafka.streams.KafkaStreams: DEBUG
    com.makeandship.mykrobe: DEBUG